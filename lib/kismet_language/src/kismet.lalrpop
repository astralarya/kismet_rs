use std::str::FromStr;
use super::ast::{Node, Sym};

grammar;

pub Kismet: Node = {
  Node
}

Node: Node = {
  <l:Node> <o:OpAdd> <r:Factor> => Node::Op(Box::new(l), o, Box::new(r)),
  Factor,
}

Factor: Node = {
  <l:Factor> <o:OpMul> <r:Term> => Node::Op(Box::new(l), o, Box::new(r)),
  Term,
}

Term: Node = {
  "(" <e:Node> ")" => Node::Paren(Box::new(e)),
  Num,
}

//

Num: Node = {
  <s:r"[0-9]+"> => match i32::from_str(s) {
    Ok(r) => Node::Int(r),
    Err(e) => Node::Error(Box::new(e))
  }
}

OpAdd: Sym = {
  "+" => Sym::Add,
  "-" => Sym::Sub,
}

OpMul: Sym = {
  "d" => Sym::Die,
  "%" => Sym::Mod,
  "*" => Sym::Mul,
  "/" => Sym::Sub,
}