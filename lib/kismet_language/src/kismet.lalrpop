use std::str::FromStr;

use lalrpop_util::ParseError;

use super::ast::{Node, Sym};

grammar;

pub Kismet: Node = {
  Expr
}

Expr: Node = {
  Disjunction,
}

Disjunction: Node = {
  <l:Disjunction> <o:OP_OR> <r:Conjunction> => Node::Op(Box::new(l), o, Box::new(r)),
  Conjunction,
}

Conjunction: Node = {
  <l:Conjunction> <o:OP_AND> <r:Comparison> => Node::Op(Box::new(l), o, Box::new(r)),
  Comparison,
}

Comparison: Node = {
  <l:Comparison> <o:OP_EQ> <r:Addition> => Node::Op(Box::new(l), o, Box::new(r)),
  Addition,
}

Addition: Node = {
  <l:Addition> <o:OP_ADD> <r:Multiply> => Node::Op(Box::new(l), o, Box::new(r)),
  Multiply,
}

Multiply: Node = {
  <l:Multiply> <o:OP_MUL> <r:Unary> => Node::Op(Box::new(l), o, Box::new(r)),
  Unary,
}

Unary: Node = {
  <l:Unary> <o:OP_POW> <r:Die> => Node::Op(Box::new(l), o, Box::new(r)),
  <o:OP_ADD> <r:Die> => Node::Unary(o, Box::new(r)),
  Die,
}

Die: Node = {
  <l:Die> <o:OP_DIE> <r:Atom> => Node::Op(Box::new(l), o, Box::new(r)),
  <o:OP_DIE> <r:Atom> => Node::Unary(o, Box::new(r)),
  Atom,
}

Atom: Node = {
  "(" <e:Expr> ")" => Node::Paren(Box::new(e)),
  Literal,
}

Literal: Node = {
  INT,
}

//

OP_OR: Sym = {
  r"(?i)or" => Sym::Or,
}

OP_AND: Sym = {
  r"(?i)and" => Sym::And,
}

OP_EQ: Sym = {
  "==" => Sym::Eq,
  "!=" => Sym::NotEq,
  "<" => Sym::Less,
  "<=" => Sym::LessEq,
  ">" => Sym::Greater,
  ">=" => Sym::GreaterEq,
}

OP_ADD: Sym = {
  "+" => Sym::Add,
  "-" => Sym::Sub,
}

OP_MUL: Sym = {
  "%" => Sym::Mod,
  "*" => Sym::Mul,
  "/" => Sym::Sub,
}

OP_POW: Sym = {
  "^" => Sym::Pow,
}

OP_DIE: Sym = {
  "d" => Sym::Die,
}

INT: Node = {
  <s:r"[0-9]+"> =>? i32::from_str(s)
    .map(|r| Node::Int(r))
    .map_err(|_| ParseError::User{error: "Integer out of range"}),
}
