use crate::ast::*;
use crate::lexer::LexerError;
use crate::token::{NumberKind, Token, TokenKind};
use crate::types::{Integer, Float, Span};

grammar<'input>;

pub Kismet = {
    stmts,
    => Node::new(Span(0..0), Expr::Stmts(vec![]))
}

stmts: Node<Expr<'input>> = {
    JoinFilter<DELIM, stmt> => Node::new(<>.0, Expr::Stmts(<>.1)),
}

stmt = {
    expression,
}

expression_list = <JoinPlus<COMMA, expression>>;

expression = {
    walrus_expression,
}

walrus_expression = {
    or_test,
}

or_test = Infix<OR, and_test>;
and_test = Infix<AND, not_test>;

not_test = {
    <lhs:NOT> <val:not_test> => Node::new(lhs.span.clone() + val.span.clone(), Expr::Unary(lhs, val)),
    c_expr,
}

c_expr = Infix<EQS, a_expr>;
a_expr = Infix<ADDS, m_expr>;
m_expr = Infix<MULS, u_expr>;

u_expr = {
    <lhs:ADDS> <val:primary> => Node::new(lhs.span.clone() + val.span.clone(), Expr::Unary(lhs, val)),
    power,
}

power = Infix<POW, coefficient>;

coefficient = {
    <lhs:numeric_literal> <rhs:die> =>
        Node::new(lhs.span.clone() + rhs.span.clone(), Expr::Coefficient(lhs, rhs)),
    <lhs:enclosure> <rhs:die> =>
        Node::new(lhs.span.clone() + rhs.span.clone(), Expr::Coefficient(lhs, rhs)),
    die,
}

die = {
    <lhs:DIE> <val:primary> => Node::new(lhs.span + val.span.clone(), Expr::Die(val)),
    primary,
}

primary = {
    atom,
    attributeref,
}

atom: Node<Expr<'input>> = {
    enclosure => Node::new(<>.span.clone(), Expr::Atom(*<>.kind)),
    identifier => Node::new(<>.span.clone(), Expr::Atom(*<>.kind)),
    literal => Node::new(<>.span.clone(), Expr::Atom(*<>.kind)),
}

attributeref: Node<Expr<'input>> = {
    <lhs:primary> DOT <rhs:ID> =>
        Node::new(lhs.span.clone() + rhs.0.clone(), Expr::Attribute(lhs, Node::new(rhs.0.clone(), rhs.1))),
    <lhs:DIE> DOT <rhs:ID> =>
        Node::new(
            lhs.span.clone() + rhs.0.clone(),
            Expr::Attribute(Node::new(lhs.span, Expr::Atom(Atom::Id("d"))), Node::new(rhs.0.clone(), rhs.1))
        ),
}

enclosure = {
    parenth_form,
    list_display,
    dict_display,
    <lhs:LBRACE> <val:stmts> <rhs:RBRACE> => Node::new(lhs.span + rhs.span, Atom::Statements(val)),
}

parenth_form: Node<Atom<'input>> = {
    <lhs:LPAREN> <val:expression_list> <rhs:RPAREN> => Node::new(lhs.span + rhs.span, Atom::Tuple(val.1)),
    <lhs:LPAREN> <val:expression> <rhs:RPAREN> => Node::new(lhs.span + rhs.span, Atom::Expression(val)),
    <lhs:LPAREN> <rhs:RPAREN> => Node::new(lhs.span + rhs.span,Atom::Tuple(vec![])),
}

list_display: Node<Atom<'input>> = {
    <lhs:LBRACKET> <val:spread_list> <rhs:RBRACKET> =>
        Node::new(lhs.span + rhs.span, Atom::ListDisplay(val.1)),
    <lhs:LBRACKET> <val:comprehension> <rhs:RBRACKET> =>
        Node::new(lhs.span + rhs.span, val),
    <lhs:LBRACKET> <rhs:RBRACKET> => Node::new(lhs.span + rhs.span, Atom::ListDisplay(vec![])),
}

dict_display: Node<Atom<'input>> = {
    <lhs:LBRACE> <val:key_datum_list> <rhs:RBRACE> =>
        Node::new(lhs.span + rhs.span, Atom::DictDisplay(val.1)),
    <lhs:LBRACE> <val:dict_comprehension> <rhs:RBRACE> =>
        Node::new(lhs.span + rhs.span, val),
    <lhs:LBRACE> <rhs:RBRACE> => Node::new(lhs.span + rhs.span, Atom::DictDisplay(vec![])),
}

spread_list = Join<COMMA, spread_item>;
spread_item: Node<SpreadItem<'input>> = {
    walrus_expression => Node::new(<>.span, SpreadItem::Expr(*<>.kind)),
    <lhs:SPREAD> <val:a_expr> => Node::new(lhs.span + val.span.clone(), SpreadItem::Spread(val)),
}

comprehension: Atom<'input> = {
    <val:walrus_expression> <mut iter:comp_for> =>
        Atom::ListComprehension{val, iter: {iter.reverse(); iter}}
}

dict_comprehension: Atom<'input> = {
    <key:expression> COLON <val:expression> <mut iter:comp_for> =>
        Atom::DictComprehension{key, val, iter: {iter.reverse(); iter}},
}

key_datum_list = Join<COMMA, key_datum>;
key_datum: Node<KeyDatum<'input>> = {
    <lhs:expression> COLON <rhs:expression> =>
        Node::new(lhs.span.clone() + rhs.span.clone(), KeyDatum::KeyDatum(lhs, rhs)),
    <lhs:SPREAD> <val:a_expr> =>
        Node::new(lhs.span + val.span.clone(), KeyDatum::Spread(val)),
}

comp_for: Vec<Node<CompIter<'input>>> = {
    <lhs:FOR> <target:target> IN <val:or_test> <iter:comp_iter?> => {
        let node = Node::new(lhs.span + val.span.clone(), CompIter::For{target, val});
        match iter {
            Some(mut val) => {val.push(node); val},
            None => vec![node],
        }
    }
}

comp_iter = {
    comp_for,
    comp_if,
}

comp_if: Vec<Node<CompIter<'input>>> = {
    <lhs:IF> <expr:or_test> <iter:comp_iter?> => {
        let node = Node::new(lhs.span + expr.span.clone(), CompIter::If(expr));
        match iter {
            Some(mut val) => {val.push(node); val},
            None => vec![node],
        }
    }
}

target: Node<TargetList<'input>> = {
    JoinPlus<COMMA, target_item> => Node::new(<>.0, TargetList::List(<>.1)),
    target_item => Node::new(<>.span.clone(), TargetList::Target(*<>.kind)),
}

target_item: Node<Target<'input>> = {
    ID => Node::new(<>.0, Target::Id(<>.1)),
    <lhs:LPAREN> <val:target_list> <rhs:RPAREN> =>
        Node::new(lhs.span + rhs.span, Target::TargetTuple(val.1)),
    <lhs:LBRACKET> <val:target_list> <rhs:RBRACKET> =>
        Node::new(lhs.span + rhs.span, Target::TargetList(val.1)),
    <lhs:LBRACE> <val:target_key> <rhs:RBRACE> =>
        Node::new(lhs.span + rhs.span, Target::TargetDict(val.1)),
}

target_list = Join<COMMA, target_item>;

target_key = Join<COMMA, target_key_item>;
target_key_item: Node<TargetDictItem<'input>> = {
    <key:ID> COLON <val:target_item> =>
        Node::new(key.0.clone() + val.span.clone(), TargetDictItem::Pair{key: Node::new(key.0, key.1), val}),
    ID => Node::new(<>.0.clone(), TargetDictItem::Shorthand(<>.1)),
}

identifier: Node<Atom<'input>> = {
    ID => Node::new(<>.0, Atom::Id(<>.1)),
}

literal = {
    STRING => Node::new(<>.0, Atom::String(<>.1)),
    numeric_literal,
}

numeric_literal: Node<Atom<'input>> = {
    FLOAT => Node::new(<>.0, Atom::Float(<>.1)),
    INT => Node::new(<>.0, Atom::Integer(<>.1)),
}

// Tokens

EQS = {
    EQ,
    NE,
    LT,
    LE,
    GT,
    GE,
}

ADDS = {
    ADD,
    SUB,
}

MULS = {
    MOD,
    MUL,
    DIV,
}

extern {
    type Location = usize;
    type Error = LexerError;

    enum Token<'input> {
        DELIM => Token { kind: TokenKind::DELIM, .. },
        COMMA => Token { kind: TokenKind::COMMA, .. },
        COLON => Token { kind: TokenKind::COLON, .. },
        SPREAD => Token { kind: TokenKind::SPREAD, .. },
        FOR => Token { kind: TokenKind::FOR, .. },
        IN => Token { kind: TokenKind::IN, .. },
        IF => Token { kind: TokenKind::IF, .. },
        OR => Token { kind: TokenKind::OR, .. },
        AND => Token { kind: TokenKind::AND, .. },
        NOT => Token { kind: TokenKind::NOT, .. },
        EQ => Token { kind: TokenKind::EQ, .. },
        NE => Token { kind: TokenKind::NE, .. },
        LT => Token { kind: TokenKind::LT, .. },
        LE => Token { kind: TokenKind::LE, .. },
        GT => Token { kind: TokenKind::GT, .. },
        GE => Token { kind: TokenKind::GE, .. },
        ADD => Token { kind: TokenKind::ADD, .. },
        SUB => Token { kind: TokenKind::SUB, .. },
        MOD => Token { kind: TokenKind::MOD, .. },
        MUL => Token { kind: TokenKind::MUL, .. },
        DIV => Token { kind: TokenKind::DIV, .. },
        POW => Token { kind: TokenKind::POW, .. },
        DIE => Token { kind: TokenKind::DIE, .. },
        DOT => Token { kind: TokenKind::DOT, .. },
        LPAREN => Token { kind: TokenKind::LPAREN, .. },
        RPAREN => Token { kind: TokenKind::RPAREN, .. },
        LBRACKET => Token { kind: TokenKind::LBRACKET, .. },
        RBRACKET => Token { kind: TokenKind::RBRACKET, .. },
        LBRACE => Token { kind: TokenKind::LBRACE, .. },
        RBRACE => Token { kind: TokenKind::RBRACE, .. },
        STRING => Token {span: <Span>, kind: TokenKind::String(<String>) },
        INT => Token {span: <Span>, kind: TokenKind::Number(NumberKind::Integer(<Integer>)) },
        FLOAT => Token {span: <Span>, kind: TokenKind::Number(NumberKind::Float(<Float>)) },
        ID => Token {span: <Span>, kind: TokenKind::Id(<&'input str>) },
    }
}

// Macros

Infix<Op, Next> = {
    <lhs:Infix<Op, Next>> <val:Op> <rhs:Next> =>
        Node::new(lhs.span.clone() + rhs.span.clone(), Expr::Op(lhs, val, rhs)),
    Next
}

Join<Delim, Child>: (Span, Vec<Child>) = {
    <val:JoinInner<Delim, Child>> <d:Delim?> => match d {
        None => val,
        Some(d) => {
            (val.0 + d.span, val.1)
        }
    },
}

JoinInner<Delim, Child>: (Span, Vec<Child>) = {
    <mut val:JoinInner<Delim, Child>> Delim <c:Child> => {
        (val.0 + c.span.clone(), {val.1.push(c); val.1})
    },
    Child => (<>.span.clone(), vec![<>])
}

JoinPlus<Delim, Child>: (Span, Vec<Child>) = {
    <mut val:JoinPlusInner<Delim, Child>> <e:Child?> => match e {
        None => val,
        Some(e) => {
            (val.0 + e.span.clone(), {val.1.push(e); val.1})
        }
    },
}

JoinPlusInner<Delim, Child>: (Span, Vec<Child>) = {
    <mut val:JoinPlusInner<Delim, Child>> <c:Child> <d:Delim> => {
        (val.0 + d.span, {val.1.push(c); val.1})
    },
    <c:Child> <d:Delim>=> (c.span.clone() + d.span, vec![c])
}

JoinFilter<Delim, Child>: (Span, Vec<Child>) = {
    <lhs:Delim*> <val:JoinFilterInner<Delim, Child>> <rhs:Delim*> =>
        (
            val.0 + Span::add_option(
                Token::vec_to_span(&rhs),
                Token::vec_to_span(&lhs),
            ),
            val.1,
        )
}

JoinFilterInner<Delim, Child>: (Span, Vec<Child>) = {
    <mut val:JoinFilterInner<Delim, Child>> Delim+ <c:Child> => {
        (val.0 + c.span.clone(), {val.1.push(c); val.1})
    },
    Child => (<>.span.clone(), vec![<>])
}

// vim: ft=rust